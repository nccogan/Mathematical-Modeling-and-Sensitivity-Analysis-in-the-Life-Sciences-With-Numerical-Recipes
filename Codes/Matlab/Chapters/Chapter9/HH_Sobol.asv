%================================================================
% Created on Tue Oct 26 11:34:10 2021
%Hodgkin-Huxley model: Sobol Sensitivity as implemented in SAlib
% @author: cogan
% version 1 uses: http://codes.arizona.edu/toolbox/help/html/installation.html
% http://codes.arizona.edu/toolbox/help/html/CODES.html
% Download the CODES package
% Need to run the following commands:
% addpath('CODES/')  
% CODES.install
%================================================================


clear
close all
set(groot,'DefaultAxesTickLabelInterpreter','latex');
set(groot,'DefaultLegendInterpreter','latex');



params_list=[ '$C_m$', '${\alpha_m}_0$', '${\beta_m}_0$', '${\alpha_h}_0$', '${\beta_h}_0$', '${\alpha_n}_0$', '${\beta_n}_0$', '$g_K$', '$g_{Na}$', '$g_l$', '$V_k$', '$V_{Na}$', '$V_l$', '$I_{app}$'];

%===============================
%Compare different 
%behaviors
%===============================

params1=[2.000, .1, 4,.07,1,0.01,.125,36, 120, .3,-12, 115,10.6,0*35];
V0=1;
m0=.053;
h0=.595;
n0=.317;
tspan = linspace(0, 20, 500);
[t1,y_solution1]=ode45(@(t,Y) rhs(t,Y,params1), [tspan(1),tspan(end)],[V0,m0,h0,n0]); 

params2=[2.000, .1, 4,.07,1,0.01,.125,36, 120, .3,-12, 115,10.6,0*35];
V0=6;
m0=.053;
h0=.595;
n0=.317;
tspan = linspace(0, 20, 500);
[t2,y_solution2]=ode45(@(t,Y) rhs(t,Y,params2), [tspan(1),tspan(end)],[V0,m0,h0,n0]); 

params3=[2.000, .1, 4,.07,1,0.01,.125,36, 120, .3,-12, 115,10.6,0*35];
V0=20;
m0=.053;
h0=.595;
n0=.317;
[t3,y_solution3]=ode45(@(t,Y) rhs(t,Y,params3), [tspan(1),tspan(end)],[V0,m0,h0,n0]); 

plot(t1,y_solution1(:,1),'b','LineWidth',2)
hold on
plot(t2,y_solution2(:,1),'m','LineWidth',2)
plot(t3,y_solution3(:,1),'k','LineWidth',2)
legend('$V_0=1$','$V_0=6$','$V_0=20$')
xlabel('Time', fontsize=16)
ylabel('Voltage', fontsize=16)
% =============================================================================
% Sobol' sensitivity. We are using the CODES package since native
% Sobol' is complex and often far to slow.
% =============================================================================

% =============================================================================
% First CODES requires simple input/output structure. We define a new
% function SA =QoI(params). The first example gives the maximum value 
% of the voltage for a given set of parameters, initial conditions and
% time-span
% =============================================================================

Test=QoI(params1) 


dim=14;
n=1e4;
%%Sobol_out=CODES.sensitivity.sobol(@(params1) QoI(params1),dim,n,'bar_plot',true,'conv_seq',linspace(100,n,20));
%%Sobol_out.S1 %gives a table with indices

%================================
%UQlab implementation
% https://www.uqlab.com
%https://uqworld.org/t/error-using-sobol-sensitivity-analysis-on-pce/1626
% Basic Installation
%​
% Unzip the downloaded zip archive in a folder, say my_UQLab_folder
%​​
% Open MATLAB and select my_UQLab_folder/core as your working directory
% Type uqlab_install 
% ================================
clearvars
rng(100,'twister')
uqlab
ModelOpts.mFile = 'QoI';
myModel = uq_createModel(ModelOpts);
% Select the sensitivity analysis module in UQLab and the Sobol' analysis method:
SobolOpts.Type = 'Sensitivity';
SobolOpts.Method = 'Sobol';

% Specify the maximum order of the Sobol' indices to be calculated:
SobolOpts.Sobol.Order = 1;
params=[2.000, .1, 4,.07,1,0.01,.125,36, 120, .3,-12, 115,10.6,0*35];
%specify marginals of parameters
InputOpts.Marginals(1).Name = 'Cm';  %
InputOpts.Marginals(1).Type = 'Normal';
InputOpts.Marginals(1).Parameters = [.95*2,1.05*2];  %  

InputOpts.Marginals(1).Name = 'alpham_0';  %
InputOpts.Marginals(1).Type = 'Normal';
InputOpts.Marginals(1).Parameters = [.95*.1,1.05*.1];  %  

InputOpts.Marginals(3).Name = 'betam_0';  % 
InputOpts.Marginals(3).Type = 'Normal';
InputOpts.Marginals(3).Parameters = [.95*4,1.05*4];  %  

InputOpts.Marginals(4).Name = 'alphah_0';  % 
InputOpts.Marginals(4).Type = 'Normal';
InputOpts.Marginals(4).Parameters = [.95*.07,1.05*.07];  %  

InputOpts.Marginals(5).Name = 'betah_0';  % 
InputOpts.Marginals(5).Type = 'Normal';
InputOpts.Marginals(5).Parameters = [.95*1,1.05*1];  %  


InputOpts.Marginals(6).Name = 'alphan_0';  % 
InputOpts.Marginals(6).Type = 'Normal';
InputOpts.Marginals(6).Parameters = [.95*.01,1.05*.01];  % 

InputOpts.Marginals(7).Name = 'betan_0';  % 
InputOpts.Marginals(7).Type = 'Normal';
InputOpts.Marginals(7).Parameters = [.95*.125,1.05*.125];  %  

   
InputOpts.Marginals(8).Name = 'gK';  %
InputOpts.Marginals(8).Type = 'Normal';
InputOpts.Marginals(8).Parameters = [.95*36,1.05*36];  %  

InputOpts.Marginals(9).Name = 'gNa';  % 
InputOpts.Marginals(9).Type = 'Normal';
InputOpts.Marginals(9).Parameters = [.95*120,1.05*120];  % 

InputOpts.Marginals(10).Name = 'gl';  % 
InputOpts.Marginals(10).Type = 'Normal';
InputOpts.Marginals(10).Parameters = [.95*.3,1.05*.3];  %  

InputOpts.Marginals(11).Name = 'Vk';  % 
InputOpts.Marginals(11).Type = 'Normal';
InputOpts.Marginals(11).Parameters = [-1.05*12,-.95*12];  %  


InputOpts.Marginals(12).Name = 'VNa';  % 
InputOpts.Marginals(12).Type = 'Noraml';
InputOpts.Marginals(12).Parameters = [.95*115,1.05*115];  %  

InputOpts.Marginals(13).Name = 'Vl';  % 
InputOpts.Marginals(13).Type = 'Normal';
InputOpts.Marginals(13).Parameters = [.95*10.6,1.05*10.6];  % 

InputOpts.Marginals(14).Name = 'Iapp';  
InputOpts.Marginals(14).Type = 'Normal';
InputOpts.Marginals(14).Parameters = [.95*0,1.05*.0001];  % 

myInput = uq_createInput(InputOpts);

% Specify the sample size for the MC simulation:
SobolOpts.Sobol.SampleSize = 1e5;
mySobolAnalysisMC = uq_createAnalysis(SobolOpts);
%================================================================
% Define the QoI function
%================================================================
function SA = QoI(params)
    V0=6;
    m0=.053;
    h0=.595;
    n0=.317;
    tspan = linspace(0, 20, 500);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
    Iapp=params(14);
 %====================
     [t,y_solution]=ode45(@(t,Y) rhs(t,Y,params), [tspan(1),tspan(end)],[V0,m0,h0,n0]); 
     SA = max(y_solution(:,1));
end

%================================================================
% Define the RHS functions
%================================================================


function f1 = rhs_V(t,Y,params)
    V=Y(1);
    m=Y(2);
    h=Y(3);
    n=Y(4);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
    Iapp=params(14);
    INa=gNa*m^3*h*(V-VNa);
    Ik=gK*n^4*(V-Vk);
    Il=gl*(V-Vl);
    f1 = -(INa+Ik+Il)/Cm+Iapp;
end

    
function f2 = rhs_m(t,Y,params)
    V=Y(1);
    m=Y(2);
    h=Y(3);
    n=Y(4);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
    alpham=alpham_0*(25-V)/(exp((25-V)/10)-1);
    betam=betam_0*exp(-V/18);
    f2 = alpham*(1-m)-betam*m;
end

function f3 = rhs_h(t,Y,params)
    V=Y(1);
    m=Y(2);
    h=Y(3);
    n=Y(4);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
     alphah=alphah_0*exp((-V)/20);
    betah=betah_0/(1+exp((-V+30)/10));
    f3 = alphah*(1-h)-betah*h;
end


function f4 = rhs_n(t,Y,params)
    V=Y(1);
    m=Y(2);
    h=Y(3);
    n=Y(4);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
     alphan=alphan_0*(-V+10)/(exp((-V+10)/10)-1);
    betan=betan_0*exp((-V)/80);
    f4 = alphan*(1-n)-betan*n;
end


function g = rhs(t,Y,params)
    V=Y(1);
    m=Y(2);
    h=Y(3);
    n=Y(4);
    Cm=params(1);
    alpham_0=params(2);
    betam_0=params(3);
    alphah_0=params(4);
    betah_0=params(5);
    alphan_0=params(6);
    betan_0=params(7);
    gK=params(8);
    gNa=params(9);
    gl=params(10);
    Vk=params(11);
    VNa=params(12);
    Vl=params(13);
    g = [rhs_V(t,Y,params);rhs_m(t,Y,params);rhs_h(t,Y,params);rhs_n(t,Y,params)];
end
